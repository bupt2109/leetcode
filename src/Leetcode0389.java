import java.util.HashMap;

/**
 * Leetcode0389
 * https://leetcode.com/problems/find-the-difference/
 * 389. Find the Difference
 *
 * Given two strings s and t which consist of only lowercase letters.
 String t is generated by random shuffling string s and then add one more letter at a random position.
 Find the letter that was added in t.

 Example:
 Input:
 s = "abcd"
 t = "abcde"
 Output:
 e
 Explanation:
 'e' is the letter that was added.
 *
 *
 * @author yu
 * @version v1.0
 * @Topic: @HashMap @Bit Manipulation
 * @Description 找到A字符串乱序后加一个字符形成的新字符串B中多出的那个字符
 * @Date 2020/2/19
 */
public class Leetcode0389 {

    /**
     * HashMap计数，新的开始减，减到出现0还要减的那个就是了
     * 200219 Accepted	6 ms	37.8 MB  https://leetcode.com/submissions/detail/304788655/
     */
    public char findTheDifference(String s, String t) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            map.put(c, map.getOrDefault(c,0) + 1);
        }
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            int count = map.getOrDefault(c,0);
            if(count == 0){
                return c;
            }else{
                map.put(c, count-1);
            }
        }
        return t.charAt(0);
    }

    /**
     * 方法2：位运算，类似于查某个只出现了一次 题号：0136
     * Accepted	1 ms	37.4 MB https://leetcode.com/submissions/detail/304790118/
     */
    public char findTheDifference1(String s, String t) {
        int tmp = 0;
        for (int i = 0; i < s.length(); i++) {
            tmp ^= s.charAt(i);
        }
        for (int i = 0; i < t.length(); i++) {
            tmp ^= t.charAt(i);
        }
        return (char)tmp;
    }

    /**
     * 三年前 Accepted	32 ms	N/A https://leetcode.com/submissions/detail/72016190/
     * 重新提交相同代码只需要7ms！！！说明leetcode机器性能提高了不少！！！
     * 代码本质和我后来提交的没有区别
     */
    public char findTheDifference3Year(String s, String t) {
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        char[] chs = s.toCharArray();
        for(char ch:chs){
            if(map.containsKey(ch)){
                map.put(ch, map.get(ch)+1);
            }
            else{
                map.put(ch,1);
            }
        }
        char[] cht = t.toCharArray();
        for(char ch:cht){
            if(!map.containsKey(ch)){
                return ch;
            }
            else{
                if(map.get(ch)==0){
                    return ch;
                }
                map.put(ch, map.get(ch)-1);
            }
        }
        return 'X';
    }
}
